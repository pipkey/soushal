{"version":3,"sources":["components/FormsControls/FormControllers.module.css","utills/validators/validators.ts","components/FormsControls/FormsConrollers.tsx","components/Login/Login.tsx"],"names":["module","exports","required","value","maxLengthCreator","maxValue","length","FormControl","meta","touched","error","children","hasError","className","style","formControl","Textarea","props","input","restProps","Input","CreateField","placeholder","component","name","validate","text","LoginReduxForm","reduxForm","form","handleSubmit","onSubmit","type","formSummaryError","connect","state","isAuth","auth","LoginThunk","LogOutThunk","to","formData"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,YAAc,qCAAqC,MAAQ,+BAA+B,iBAAmB,4C,iCCD/H,oEAAO,IAAMC,EAAW,SAACC,GACrB,IAAIA,EACJ,MAAO,qBAEEC,EAAkB,SAACC,GAAD,OAAsB,SAACF,GAClD,GAAIA,EAAMG,OAASD,EAAU,MAAM,iBAAN,OAAwBA,EAAxB,e,+LCO3BE,EAAwC,SAAC,GAAuC,IAAD,IAArCC,KAAOC,EAA8B,EAA9BA,QAAQC,EAAsB,EAAtBA,MAAQC,EAAc,EAAdA,SAC7DC,EAAWH,GAAWC,EAE5B,OACI,yBAAKG,UAAWC,IAAMC,YAAc,KAAOH,EAAWE,IAAMJ,MAAQ,KAChE,6BACKC,GAEJC,GAAY,kCAAQF,EAAR,OAMZM,EAAqC,SAACC,GAAW,IACnDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KAD2C,YACrBS,EADqB,mBAEzD,OAAO,kBAACV,EAAgBU,EAAO,8CAAcE,EAAeD,IAArD,MAGEE,EAAkC,SAACH,GAAW,IAChDC,EAA6BD,EAA7BC,MAAgBC,GAAaF,EAAtBT,KADwC,YAClBS,EADkB,mBAEtD,OAAO,kBAACV,EAAgBU,EAAO,2CAAWE,EAAeD,IAAlD,MAQEG,EAAc,SAACC,EAA8BC,EAAgBC,EAAcC,EAAeR,EAAkBS,GACrH,OACI,6BACI,kBAAC,IAAD,eACIJ,YAAaA,EACbC,UAAWA,EACXC,KAAMA,EACNC,SAAUA,GACNR,IANZ,IAOQS,K,iCClDhB,+FAkDIC,EAAiBC,YAAwB,CAACC,KAAM,SAA/BD,EArBwC,SAAC,GAA2B,IAA1BE,EAAyB,EAAzBA,aAAcpB,EAAW,EAAXA,MAEzE,OACI,0BAAMqB,SAAUD,GACPT,YAAY,QAAQD,IAAM,QAAQ,CAAClB,KAAW,MAC9CmB,YAAY,WAAWD,IAAM,WAAW,CAAClB,KAAW,CAAC8B,KAAK,aAC1DX,YAAY,KAAMD,IAAM,aAAa,KAAM,CAACY,KAAK,YAAa,eAGnE,6BACKtB,GAAS,yBAAKG,UAAWC,IAAMmB,kBAAtB,IAA2CvB,EAA3C,MAGd,6BACI,8CA8BDwB,uBAHS,SAACC,GAAD,MAA2C,CAACC,OAAQD,EAAME,KAAKD,UAG/C,CAACE,eAAYC,iBAAtCL,EArBD,SAACjB,GAKX,OAAIA,EAAMmB,OACC,kBAAC,IAAD,CAAUI,GAAI,aAIrB,6BACI,uCACA,kBAACb,EAAD,CAAgBI,SAXP,SAACU,GACdxB,EAAMqB,WAAWG","file":"static/js/7.1d054a76.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControllers_formControl__27bVB\",\"error\":\"FormControllers_error__3ZDvI\",\"formSummaryError\":\"FormControllers_formSummaryError__2bRMd\"};","export const required = (value: string) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\"\r\n};\r\nexport const maxLengthCreator= (maxValue:number) =>  (value: string) => {\r\n    if (value.length > maxValue) return `Max length is ${maxValue} symbols`;\r\n    return undefined\r\n};","import React, {Component} from \"react\"\r\nimport style from \"./FormControllers.module.css\"\r\nimport {required} from \"../../utills/validators/validators\";\r\nimport {Field} from \"redux-form\";\r\nimport {string} from \"prop-types\";\r\n\r\ntype MyTextareaType = {\r\n    input: any\r\n    meta: any\r\n    child: any\r\n}\r\n\r\nconst FormControl: React.FC<MyTextareaType> = ({meta: {touched,error}, children}) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={style.formControl + \" \" + (hasError ? style.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span> {error} </span>}\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport const Textarea: React.FC<MyTextareaType> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...restProps} {...input}/> </FormControl>\r\n};\r\n\r\nexport const Input: React.FC<MyTextareaType> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...restProps} {...input}/> </FormControl>\r\n};\r\n\r\ntype placeholderType = string | null\r\ntype PropsType = typeType | null\r\ntype typeType ={type: string}\r\ntype textType = string | null\r\n\r\nexport const CreateField = (placeholder: placeholderType, component: any, name: string, validate: any, props:PropsType , text?:textType) => {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                component={component}\r\n                name={name}\r\n                validate={validate}\r\n                {...props}\r\n            /> {text}\r\n        </div>)\r\n};","import React from \"react\"\r\nimport {Field, reduxForm, InjectedFormProps} from \"redux-form\";\r\nimport {Input, CreateField} from \"../FormsControls/FormsConrollers\";\r\nimport {required} from \"../../utills/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {LoginThunk, LogOutThunk} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router\";\r\nimport style from \"../../components/FormsControls/FormControllers.module.css\"\r\nimport {AppRootStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\ntype loginPropsType ={\r\n    LoginThunk: (formData:FormDataType) => void\r\n    LogOutThunk: () => void\r\n    isAuth: boolean\r\n}\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\n\r\n\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = ({handleSubmit, error}) => {\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n               { CreateField(\"Email\",Input,\"email\",[required], null)}\r\n               { CreateField(\"Password\",Input,\"password\",[required], {type:\"password\"})}\r\n               { CreateField(null ,Input,\"rememberMe\",null, {type:\"checkbox\"}, \"remember Me\")}\r\n\r\n\r\n            <div>\r\n                {error && <div className={style.formSummaryError}> { error } </div>}\r\n            </div>\r\n\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n};\r\n\r\nlet LoginReduxForm = reduxForm<FormDataType>({form: \"Login\"})(LoginForm);\r\n\r\nconst Login = (props: loginPropsType) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.LoginThunk(formData)\r\n    };\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1> Login </h1>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nconst mapStateToProps = (state: AppRootStateType):MapPropsType => ({isAuth: state.auth.isAuth});\r\n\r\n\r\nexport default connect(mapStateToProps, {LoginThunk, LogOutThunk})(Login);"],"sourceRoot":""}