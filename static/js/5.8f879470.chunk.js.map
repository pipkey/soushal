{"version":3,"sources":["components/FormsControls/FormControllers.module.css","utills/validators/validators.ts","components/FormsControls/FormsConrollers.tsx","HOC/withAuthRedirect.tsx","components/Navbar/Dialogs/Dialogs.module.css","components/Navbar/Dialogs/DialogItem/DialogItem.tsx","components/Navbar/Dialogs/Messages/Message.tsx","components/Navbar/Dialogs/Dialogs.tsx","components/Navbar/Dialogs/DialogsContainer.tsx"],"names":["module","exports","required","value","maxLengthCreator","maxValue","length","FormControl","meta","touched","error","children","hasError","className","style","formControl","Textarea","props","input","restProps","Input","CreateField","placeholder","component","name","validate","text","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","to","DialogItem","path","id","ss","dialog","active","activeClassName","ava","src","img","Message","message","maxLength30","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","Dialogs","dialogsElement","messagePage","dialogsDate","map","messageElement","messageDate","key","dialogs","dialogsItems","messages","NewMessage","newMessage","compose"],"mappings":"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","file":"static/js/5.8f879470.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControllers_formControl__27bVB\",\"error\":\"FormControllers_error__3ZDvI\",\"formSummaryError\":\"FormControllers_formSummaryError__2bRMd\"};","export const required = (value: string) => {\r\n    if (value) return undefined;\r\n    return \"Field is required\"\r\n};\r\nexport const maxLengthCreator= (maxValue:number) =>  (value: string) => {\r\n    if (value.length > maxValue) return `Max length is ${maxValue} symbols`;\r\n    return undefined\r\n};","import React, {Component} from \"react\"\r\nimport style from \"./FormControllers.module.css\"\r\nimport {required} from \"../../utills/validators/validators\";\r\nimport {Field} from \"redux-form\";\r\nimport {string} from \"prop-types\";\r\n\r\ntype MyTextareaType = {\r\n    input: any\r\n    meta: any\r\n    child: any\r\n}\r\n\r\nconst FormControl: React.FC<MyTextareaType> = ({meta: {touched,error}, children}) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={style.formControl + \" \" + (hasError ? style.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span> {error} </span>}\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport const Textarea: React.FC<MyTextareaType> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...restProps} {...input}/> </FormControl>\r\n};\r\n\r\nexport const Input: React.FC<MyTextareaType> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...restProps} {...input}/> </FormControl>\r\n};\r\n\r\ntype placeholderType = string | null\r\ntype PropsType = typeType | null\r\ntype typeType ={type: string}\r\ntype textType = string | null\r\n\r\nexport const CreateField = (placeholder: placeholderType, component: any, name: string, validate: any, props:PropsType , text?:textType) => {\r\n    return (\r\n        <div>\r\n            <Field\r\n                placeholder={placeholder}\r\n                component={component}\r\n                name={name}\r\n                validate={validate}\r\n                {...props}\r\n            /> {text}\r\n        </div>)\r\n};","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../redux/redux-store\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppRootStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n        let {isAuth, ...restProps} = props;\r\n         if (!isAuth) return <Redirect to=\"/login\"/>;\r\n        return <Component {...restProps as T}/>\r\n    };\r\n\r\n\r\n    // const ConectedRedirectComponent = connect(mapStateToProps)(RedirectComponent);\r\n    // return ConectedRedirectComponent\r\n    return  connect(mapStateToProps)(RedirectComponent);\r\n\r\n\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2Egp-\",\"dialogsItems\":\"Dialogs_dialogsItems__276MX\",\"active\":\"Dialogs_active__JHmeA\",\"dialog\":\"Dialogs_dialog__1h81u\",\"messages\":\"Dialogs_messages__1heLH\",\"message\":\"Dialogs_message__1rxZH\",\"ava\":\"Dialogs_ava__HCy9J\",\"avMes\":\"Dialogs_avMes__3wMYU\"};","import React from \"react\";\r\nimport ss from \"./../Dialogs.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nexport type DialogType = {\r\n    id: number\r\n    name: string\r\n    img: string\r\n}\r\n\r\nconst DialogItem = (props: DialogType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={ss.dialog + \" \" + ss.active}>\r\n            <NavLink to={path}\r\n                     activeClassName={ss.active}>\r\n                <img className={ss.ava} src={props.img}/>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport ss from \"./../Dialogs.module.css\"\r\n\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n\r\n    return (\r\n\r\n            <div className={ss.message}>\r\n                {props.message}\r\n            </div>\r\n         )\r\n};\r\n\r\n\r\nexport default Message;","import React from \"react\";\r\nimport ss from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Messages/Message\";\r\nimport {MessagePageType} from \"../../../redux/store\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {Textarea} from \"../../FormsControls/FormsConrollers\";\r\nimport {required, maxLengthCreator} from \"../../../utills/validators/validators\";\r\n\r\n\r\ntype MessagePropsType = {\r\n    messagePage: MessagePageType\r\n    newMessage: string\r\n    NewMessage: (newMessage: string) => void\r\n    isAuth: boolean\r\n}\r\n\r\n\r\nconst Dialogs = (props: MessagePropsType) => {\r\n\r\n    let dialogsElement = props.messagePage.dialogsDate.map(dialog => < DialogItem id={dialog.id}\r\n                                                                                  name={dialog.name}\r\n                                                                                  img={dialog.img}/>);\r\n    let messageElement = props.messagePage.messageDate.map(message => <Message key={message.id}\r\n                                                                               message={message.message}/>);\r\n\r\n\r\n    const AddNewMBody = (value: AddMessageFormType) => {\r\n        props.NewMessage(value.newMessage);\r\n        // alert(value.newMessage)\r\n    };\r\n\r\n    return (\r\n        <div className={ss.dialogs}>\r\n\r\n            <div className={ss.dialogsItems}>\r\n                {dialogsElement}\r\n\r\n            </div>\r\n            <div className={ss.messages}>\r\n                {messageElement}\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={AddNewMBody}/>\r\n        </div>\r\n    )\r\n};\r\n\r\ntype AddMessageFormType = {\r\n    newMessage: string\r\n}\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={\"newMessage\"}\r\n                       placeholder={\"enter your message\"}\r\n                       validate ={[\r\n                           required, maxLength30\r\n                       ]}\r\n                />\r\n                <button> Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormType>({form: \"dialogAddMessageForm\"})(AddMessageForm);\r\n\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport {MessagePageType} from \"../../../redux/store\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {NewMessage} from \"../../../redux/dialog-reducer\";\r\nimport {withAuthRedirect} from \"../../../HOC/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {AppRootStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\n//Types container\r\n\r\ntype MapStateType = {\r\n    messagePage: MessagePageType\r\n};\r\n\r\nlet mapStateToProps = (state: AppRootStateType): MapStateType => {\r\n    return {\r\n        messagePage: state.messagePage\r\n    }\r\n};\r\n\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {NewMessage}),\r\n    withAuthRedirect )(Dialogs);\r\n\r\n\r\n\r\n"],"sourceRoot":""}